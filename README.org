#+TITLE: Yaks Packages


# NOTE: To avoid having this in the info manual, we use HTML rather than Org
# syntax; it still appears with the GitHub renderer.
#+HTML: <a href="https://melpa.org/#/yakspkgs"><img src="https://melpa.org/packages/yakspkgs-badge.svg" alt="melpa package"></a> <a href="https://stable.melpa.org/#/yakspkgs"><img src="https://stable.melpa.org/packages/yakspkgs-badge.svg" alt="melpa stable package"></a>
#+HTML: <a href="https://github.com/positron-solutions/yakspkgs/actions/?workflow=CI"><img src="https://github.com/positron-solutions/yakspkgs/actions/workflows/ci.yml/badge.svg" alt="CI workflow status"></a>
#+HTML: <a href="https://github.com/positron-solutions/yakspkgs/actions/?workflow=Developer+Certificate+of+Origin"><img src="https://github.com/positron-solutions/yakspkgs/actions/workflows/dco.yml/badge.svg" alt="DCO Check"></a>

* Emacs interactively installing its own 3rd party dependencies

  Emacs can do this:

  #+begin_src shell
    nix profile install nixpkgs#hello --profile emacs-profile

    export PATH=$PATH:./emacs-profile/bin

    which hello
    # /home/user/.emacs.d/emacs-profile/bin/hello

    hello
    Hello, world!
  #+end_src

  Binaries, reproducible, when you need them.  No need for restarting Emacs or
  using Nix or Guix commands.  Let Emacs control everything, as the world should
  be.  Portable across Darwin, WSL2, Linux etc.  Pure-build system agnostic so
  both Guix and Nix users can play together.  Re-use work in CI & sanbox tests.

  ⚠️ *WARNING* ⚠️

  This package is very incomplete and this repo is being rushed out as a
  proof-of-concept.

  Too much of the Nix & Guix work out there has adopted a workflow that forces
  users to restart or run Nix builds just to change Elisp dependencies.  Read
  the [[#design-vision][Design Vision]] to understand what we should be doing and what this package
  will be.  Read [[#current-status][Current Status]] to figure out how to where to start working on
  it.

* Contents                                                         :noexport:
:PROPERTIES:
:TOC:      :include siblings
:END:
:CONTENTS:
- [[Contents][Contents]]
- [[Introduction to pure profiles][Introduction to pure profiles]]
- [[The Design Vision][The Design Vision]]
  - [[Implementation points][Implementation points]]
  - [[Interactive profile][Interactive profile]]
    - [[Lock file][Lock file]]
  - [[Declarative Profile][Declarative Profile]]
  - [[Adding dependencies to Elisp packages][Adding dependencies to Elisp packages]]
    - [[New Elisp Package Headers][New Elisp Package Headers]]
    - [[Elisp Package Decoration][Elisp Package Decoration]]
- [[Install yakspkgs][Install yakspkgs]]
- [[Current Status][Current Status]]
- [[Hacking Guide][Hacking Guide]]
  - [[Environment][Environment]]
  - [[Profiles][Profiles]]
    - [[Creation][Creation]]
    - [[Installing a Declarative Package Set][Installing a Declarative Package Set]]
      - [[Building a set of profile contents][Building a set of profile contents]]
      - [[Installation of profile contents into the profile][Installation of profile contents into the profile]]
    - [[Activation][Activation]]
  - [[Packages][Packages]]
  - [[Systemd and the Emacs Daemon][Systemd and the Emacs Daemon]]
- [[Contributing][Contributing]]
  - [[License][License]]
  - [[Developer Certificate of Origin (DCO)][Developer Certificate of Origin (DCO)]]
    - [[Sign-off][Sign-off]]
    - [[GPG signature][GPG signature]]
    - [[User setup for submitting changes][User setup for submitting changes]]
      - [[Automatically add sign-off][Automatically add sign-off]]
      - [[Automatic GPG signing with per-project keys][Automatic GPG signing with per-project keys]]
      - [[Manually signing & adding sign-off][Manually signing & adding sign-off]]
- [[Shout-outs][Shout-outs]]
- [[Footnote on FSF and Emacs Core Licensing][Footnote on FSF and Emacs Core Licensing]]
:END:

* Introduction to pure profiles

  Pure dependency management tools (Nix & Guix) have a concept of a [[https://nixos.org/manual/nix/stable/package-management/profiles.html][profile]], a
  way to present entire sets of programs and their dependencies an environment.
  This package gives Emacs control of its very own profile.  Emacs with a
  profile can do all of its own 3rd party dependency management without
  affecting the rest of the user shell.  Freedom.  Independence.
  Reproducibility and portability.  This use manner will revolutionize Emacs's
  relationship with binary packages.

* The Design Vision

  Emacs should be it's own package manager for 3rd party packages, using Nix /
  Guix as backends.  Emacs should be in the driver seat.  No restarts necessary.

  While nixpkgs and guixpkgs include a [[https://search.nixos.org/packages][lot of packages]], Emacs may need special
  builds or bleeding edge upstreams, and this repository can provide those
  packages. Yakspkgs is an especially good place for dynamically loaded modules
  that are otherwise a major portability headache.

** Implementation points

  - Infrastructure for using Nix & Guix profiles from within Emacs
  - Packages tuned for Emacs whenever package upstreams need some help
  - Live or fully declarative profile management
  - Integration infrastructure for elisp to predictably consume 3rd party deps
    from profiles
  - Home manager integration driven from within Emacs
  - Lots of packaging examples for people to provide their binaries without
    requiring hosting

  *Note* ⚠️ Current development is favoring the declarative profile style.  This
  is covered in the [[Hacking Guide][Hacking Guide]] section. ⚠️

** Interactive profile

   The interactive profile can be edited by the user live using Emacs commands to
   experiment with different binary dependencies from yakspkgs

*** Lock file

    Record the current state of the interactive profile into a *portable* lock
    file, using elisp, consumed in Emacs or through [[https://github.com/talyz/fromElisp][interpretation]] in batch
    workflows.

    Re-hydrating the lock file into a profile results in a reproducible profile.
    It only changes when the lock file changes.

** Declarative Profile

  After a frozen interactive profile is working well enough, a declarative
  profile can be created for human-maintained fully reproducible 3rd party
  dependency sets.

** Adding dependencies to Elisp packages

   Either we say what elisp packages depend on or elisp packges tell us what
   they depend on.  Both workflows will be needed during adoption.

*** New Elisp Package Headers

    Elisp packages like emacs-vterm can adopt a new header instructing yakspkgs
    about what 3rd party dependencies to install into the profile.

*** Elisp Package Decoration

    Not all elisp packages will declare their 3rd party dependencies overnight.
    It takes time to normalize this and make it as ubiquitous as declaring elisp
    dependencies.  Package decoration allows elisp package managers to get 3rd
    party dependencies when yakspkgs moves faster than elisp packages.


* Install yakspkgs

   ⚠️ Stub for elisp modules after POC implementation.  Won't run yet. ⚠️

  #+begin_src elisp


    ;; straight-use-package-by-default t and you want a git version
    (use-package yakspkgs
      :straight
      (yakspkgs :type git :host github :repo "positron-solutions/yakspkgs"))

    ;; if straight-use-package-by-default is nil
    (straight-use-package '(yakspkgs :type git :host github
                                           :repo "positron-solutions/yakspkgs"))

    ;; using elpaca (recommended to add a hash for reproducibility)
    (elpaca-use-package
     (example :host github
              :repo "positron-solutions/yaskpkgs")
     :demand t)

  #+end_src

* Current Status

  YOU GET NOTHING.  ONLY THE DESIGN IS DONE.  PROFILES WERE TESTED MANUALLY.
  CAN'T WAIT FOR THOSE FIRST COMMITS.

* Hacking Guide
  :PROPERTIES:
  :ID:       9125bc63-03c4-4f8a-8227-d81afad575e0
  :END:

  This is a short re-index of the information related to providing Emacs with an
  independent profile, similar to what home manager does.  Links and examples
  work in Emacs, as literate org content.

  ⚠️ This is work in progress.  Many headlines are just stubs about information
  we will need eventually. ⚠️

** Environment

   - The regular nix envionment data is carried into to the Emacs process
     (unless you do something to stop this of course)

   - Nix uses the environment in order to use profiles.  You can list the
     environment using the =list-environment= package.

   - Inside of vterm, you can run =env=

   - Direnv integration with these concepts is of interest.  We don't want
     projects to lose our 3rd party deps unless the user explicitly needs this
     to happen.

** Profiles

   Profiles are versioned sets of packages.  We want to give Emacs a profile.
   To do a batch style update to a profile, we can use symlinkJoin to create a
   package that points to other packages and install /that/ into the profile.

*** Creation

   Nix profiles are maintained using the nix binary.  You can create a basic
   profile manually and "activate" it by just appending the =$PATH=.

  #+begin_src shell
    nix profile install nixpkgs#hello --profile emacs-profile

    export PATH=$PATH:./emacs-profile/bin

    which hello # /home/user/.emacs.d/emacs-profile/bin/hello

    hello Hello, world!
  #+end_src

   *Note*, for libraries, such as Emacs modules, you will need to state the path
   in a nix variable and export that dynamic path to a static path.

   You can also link the dynamic path to a predictable location and use that
   location from within elisp.  This is done now in Posimacs to expose the
   vterm.so to Emacs.

   #+begin_quote
   The file manifest.json records the provenance of the packages that are
   installed in this version of the profile.
   #+end_quote

   So where is our new manifest?

   #+begin_src bash
     cat emacs-profile/manifest.json | jq

     # {
     #   "elements": [
     #     {
     #       "active": true,
     #       "attrPath": "legacyPackages.x86_64-linux.hello",
     #       "originalUrl": "flake:nixpkgs",
     #       "outputs": null,
     #       "priority": 5,
     #       "storePaths": [
     #         "/nix/store/g2m8kfw7kpgpph05v2fxcx4d5an09hl3-hello-2.12.1"
     #       ],
     #       "url": "github:NixOS/nixpkgs/a2d2f70b82ada0eadbcb1df2bca32d841a3c1bf1"
     #     }
     #   ],
     #   "version": 1
     # }

   #+end_src

*** Installing a Declarative Package Set

    We don't want to use the old school (dirty) =nix-env -i= style stuff all the
    time.  Use flakes.  Be pure.

**** Building a set of profile contents

    We can use =pkgs.symlinkJoin= to bundle together a pile of packages into one
    super package.  Then, this super-package has all the versioned goodness of
    the profile.  Thus we can roll back to a previous working declaration if
    needed.

    An example is in the profile-contents directory.

    [[https://nixos.org/manual/nix/stable/package-management/profiles.html][Beautiful Nix Profile diagrams]].  It is a superposition of outputs basically.
    If we install this package into the profile, the profile will have a new
    version, one per each time we update and install our overall declaration.

**** Installation of profile contents into the profile

     Home manager also builds itself as a package.  You can see in the
     activation script that it executes commands like below:

    #+begin_src bash

      # The docs in the help are good
      nix profile --help
      nix profile install /nix/store/yz31iyfqdw4n20l6bpbbxx1y5hrxz4l7-home-manager-path

      # You can see the derivation that outputs this path.  Nix infers
      # this fact from the /nix directory in the path.
      nix show-derivation /nix/store/yz31iyfqdw4n20l6bpbbxx1y5hrxz4l7-home-manager-path

    #+end_src

    Look inside the profile-contents directory for a flake.  This flake just
    provides a super-package including cowsay and hello.  Let's install this
    super-package into our Emacs profile:

    #+begin_src bash

      nix profile install ./profile-contents#profile-contents --profile emacs-profile

      # If you get a collision, you should remove the hello package or just delete the profile and start over
      # nix profile remove /nix/store/g2m8kfw7kpgpph05v2fxcx4d5an09hl3-hello-2.12.1 --profile emacs-profile

      # after these get installed, the manifest will be updated.  If the profile is on
      # the $PATH, you will be able to run cowsay and hello.  No magic, but cool.

      # Note, the structure includes our silly `emacs-god-profile' package name from the flake.nix
      tree emacs-profile/bin -L 2
      emacs-profile/bin
      ├── cowsay -> /nix/store/3d54xbrqj5zixa0cfnyki09jrffr0g3a-cowsay-3.04/bin/cowsay
      ├── cowthink -> cowsay
      └── hello -> /nix/store/g2m8kfw7kpgpph05v2fxcx4d5an09hl3-hello-2.12.1/bin/hello

    #+end_src

    So there it is.  You can build a set of packages.  You can attach them to a
    profile.  You can update them declaratively.  You can make the available on
    the bin path.  This is almost a POC for giving Emacs an independent profile
    already.

*** Activation

    Let's reverse-engineer home manager's activation to get some ideas.  If you
    have home manager installed, after building a completed home manager
    profile, just take a look at =~/.nixpkgs/config/result/activate=.  It
    contains a lot of stuff that applies to starting systemd processes.  The
    path and environment stuff is what we're interested in.

    The "activation" script basically:

    - Check for file symlink collisions on any files we plan to link into place
    - Check that the profile we are upgrading to is not a downgrade
    - Link stuff into place and make the profile active

    The money hunk here updates the =PATH=, desktop environment, and systemd
    state.  It's not very magical.

    #+begin_src bash
      XDG_RUNTIME_DIR=${XDG_RUNTIME_DIR:-/run/user/$(id -u)} \
          PATH=/nix/store/9fhmhbfkdcarrl1d75h1zbfsnbmwrw57-systemd-250.4/bin:$PATH \
      bash /nix/store/lyvazadz3v9nck27nwcczqi4s9m402ix-systemd-activate.sh "${oldGenPath=}" "$newGenPath"
    #+end_src

    Yes, updating the =PATH= is 99% of "activation."  For Emacs to obtain
    binaries, it's almost 100%.  We only need to reproduce the file linking
    support for linking libraries into place if elisp scripts expect them to be
    in a known.  (The slightly longer way is to include the generated paths into
    the elisp files, basically using nix to finish the elisp files as
    tempaltes.)

    *Note* it is not recommended to use most elisp files as generated outputs of Nix
    because they are immutable.  We want to be able to modify our elisp without
    running a bunch of (sometimes costly) nix builds.

    We can reverse-engineer the symlink system and even perform "activation"
    using elisp instead of yucky bash or less common (to Emacs users) Nix lang.

** Packages

   We are gluing nix packages onto Emacs packages.  Either the package asks for
   it or we provide the package when we see its dependent.

   Emacs packages have package headers.  They can contain 3rd party dependency
   declaration or we can provide a map.  We can consume header information or we
   can decorate those packages with information they don't know yet.

** Systemd and the Emacs Daemon

   If you want Emacs to run when the DE starts, home manager has this
   integration ready to go with its Emacs module.

   If we try to drive this stuff from within Emacs' own profile, it may
   introduce some bootstrap issues with low value, so that's not a goal right
   now.

   There's an analog for Darwin.  (Sorry WSL2).

* Contributing

First decide if you want to work on this repository or fork it to something
entirely different.  Non-exhaustive list of changes that are very welcome:

- Guix package declarations
- Guix translation of elisp package headers
- Guix elisp package decoration
- Guix profile generation from lock file
- Guix commands to interact with Guix daemon

Changes will likely be rejected if it is aimed at:

- Batch style workflows that require the user to restart Emacs except for CI &
  sandbox cases, which must use a lock file

** License

   The CI files in the project are distributed with the MIT license. For elisp
   files, Nix expressions, and Guix expressios, only files with GPL3 headers
   will be accepted.  DCO sign-off is mandatory.

** Developer Certificate of Origin (DCO)

   A [[./DCO][copy of the DCO]] is distributed with this project.  Read its text to
   understand the significance of configuring for sign-off.

*** Sign-off

    A sign-off means adding a "trailer" to your commit that looks like the
    following:

    #+begin_src
    Signed-off-by: Random J Developer <random@developer.example.org>
    #+end_src

*** GPG signature

    A GPG signed commit shows that the owner of the private key submitted the
    changes.  Wherever signatures are recorded in chains, they can demonstrate
    participation in changes elsewhere and awareness of what the submitter is
    participating in.  The lack of such a proof elsewhere and the presence of a
    verifiable proof in this repo's history prevent improper claims of
    originating source code or introducing relabelled source code.

*** User setup for submitting changes

    Follow these instructions before you get ready to submit a pull-request.

    Refer to the [[https://docs.github.com/en/authentication/managing-commit-signature-verification/signing-commits][Github signing commits]] instructions to set up your git client
    to add GPG signatures.  File issues if you run into Emacs-specific problems.

    Because signing is intended to be a conscious process, please remember to
    read and understand the [[./DCO][Developer Certificate of Origin]] before confinguring
    your client to automatically sign-off on commits.

**** Automatically add sign-off

     In magit, set the =-s= switch.  Use =C-x C-s= (=transient-save=) to
     preserve this switch on future uses.  (Note, this is not per-project).You
     can also set the signature flag this way.

**** Automatic GPG signing with per-project keys

    In order to specify which projects you intend to sign with which keys, you
    will want to configure your git client using path-specific configurations.

    Configuing git for this can be done with the following directory structure:

    #+begin_src
    /home/rjdeveloper/
    ├── .gitconfig
    └── .gitconfig.d
        ├── sco-linux-projects.conf
        ├── other-projects.conf
        └── gpg-signing-projects.conf
    #+end_src

    In your root config, ~.gitconfig~, add an =includeIf= directive that will
    load the configuration you use for projects you intend to GPG sign commits
    for.

    #+begin_src
    [includeIf "gitdir:/home/rjdeveloper/**/gpg-signing/**/.git"]
      path = "~/.gitconfig.d/gpg-signing-projects.conf"
    #+end_src

    In the ~gpg-signing-projects.conf~ add your GPG signing configuration from
    earlier.  =sign= adds the GPG signature automatically.  File an issue if you
    need help with multiple GPG homes or other configurations.

    #+begin_src
    [user]
      name = "Random J Developer"
      email = "random@developer.example.org"
      signingkey = "5FF0EBDC623B3AD4"

    [commit]
      sign = true
      gpgSign = true
    #+end_src

**** Manually signing & adding sign-off

    If you don't like these configurations and want to individually indicate you
    have read and intend to apply the DCO to your changes, these commands are
    equivalent:

    #+begin_src bash
      git commit -s -S --message "I don't like using .gitconfig"

      # To clean up a commit
      git commit --amend -s -S --no-message

      # Combine with rebase to sign / sign-off multiple existing commits
      git rebase -i
    #+end_src


* Shout-outs

- [[https://github.com/alphapapa][alphapapa]] for being super prolific at everything, including package writing,
  documentation, and activity on various social platforms
- [[https://github.com/adisbladis][adisbladis]] for the Nix overlay that makes the CI and local development so nice
- [[https://www.fsf.org/][FSF]] for the Yak shaving club
- [[https://github.com/NobbZ][NobbZ]] for being all over the Nix & Emacs interwebs

* Footnote on FSF and Emacs Core Licensing

Free Software Foundation currently requires copyright assignment on all code
that goes into Emacs core. Many GNU projects have since switched to using a
Developer Certificate of Origin.  DCO sign-off is a practice accepted by git,
GCC, and the [[https://wiki.linuxfoundation.org/dco][Linux Kernel]].  Doing DCO sign-off is not the same as copyright
assignment, and serves a slightlly different purpose.  DCO is more defensive of
/any/ users while copyright assignment is offensive in the case of GPL
non-compliance. In any case, with DCO sign-off, you can be assured that changes
submitted to a code base you control are incontrovertibly covered by the license
you chose.  Using the DCO *may* make it easier for code in your project to be
included in Emacs core later.

# Local Variables:
# before-save-hook: (when (require 'org-make-toc nil t) (org-make-toc))
# org-export-with-properties: ()
# org-export-with-title: t
# org-make-toc-link-type-fn: org-make-toc--link-entry-github
# End:
